# streamlit_app.py

import streamlit as st
import snowflake.connector
import pandas as pd

# --- Titre ---
st.set_page_config(page_title="BookShop Dashboard", layout="wide")
st.title("üìö Dashboard BookShop - Ventes & Clients")

# --- Initialisation de df vide ---
df = pd.DataFrame()

# --- Connexion √† Snowflake ---
try:
    conn = snowflake.connector.connect(
        user='marietasow',
        password='Sow]123456789]',
        account='bivpnnj-vd86335',
        warehouse='COMPUTE_WH',
        database='BOOKSHOP',
        schema='STAGGING_MARTS'
    )
    st.success("Connexion √† Snowflake r√©ussie.")
except Exception as e:
    st.error(f"Erreur de connexion √† Snowflake : {str(e)}")
    conn = None

# --- Chargement des donn√©es ---
query = "SELECT * FROM obt_sales"

try:
    if conn:
        df = pd.read_sql(query, conn)
        if df.empty:
            st.warning("‚ö†Ô∏è Aucune donn√©e dans Snowflake. Chargement local...")
            df = pd.read_csv("data/Books_Data_Clean.csv")
            st.success("‚úÖ Donn√©es locales charg√©es.")
except Exception:
    st.warning("‚ö†Ô∏è Erreur Snowflake. Chargement local...")
    try:
        df = pd.read_csv("data/Books_Data_Clean.csv")
        st.success("‚úÖ Donn√©es locales charg√©es.")
    except Exception as err:
        st.error(f"‚ùå Impossible de charger les donn√©es locales : {str(err)}")

# --- Si donn√©es charg√©es ---
if not df.empty:
    df.columns = df.columns.str.strip().str.lower()  # standardisation

    # --- Barre lat√©rale : Filtres ---
    st.sidebar.header("üéõÔ∏è Filtres dynamiques")

    annees = sorted(df["publishing year"].dropna().unique())
    auteurs = sorted(df["author"].dropna().unique())
    genres = sorted(df["genre"].dropna().unique())
    langues = sorted(df["language_code"].dropna().unique())

    annee_selection = st.sidebar.multiselect("Ann√©e", annees)
    auteur_selection = st.sidebar.multiselect("Auteur", auteurs)
    genre_selection = st.sidebar.multiselect("Genre", genres)
    langue_selection = st.sidebar.multiselect("Langue", langues)

    # --- Recherche ---
    st.sidebar.markdown("### üîç Recherche livre / auteur")
    search_query = st.sidebar.text_input("Mot-cl√©")

    # --- Application des filtres ---
    df_filtr√© = df.copy()
    if annee_selection:
        df_filtr√© = df_filtr√©[df_filtr√©["publishing year"].isin(annee_selection)]
    if auteur_selection:
        df_filtr√© = df_filtr√©[df_filtr√©["author"].isin(auteur_selection)]
    if genre_selection:
        df_filtr√© = df_filtr√©[df_filtr√©["genre"].isin(genre_selection)]
    if langue_selection:
        df_filtr√© = df_filtr√©[df_filtr√©["language_code"].isin(langue_selection)]
    if search_query:
        df_filtr√© = df_filtr√©[
            df_filtr√©["book name"].str.contains(search_query, case=False, na=False)
            | df_filtr√©["author"].str.contains(search_query, case=False, na=False)
        ]

    # --- KPIs ---
    st.subheader("üìä Indicateurs cl√©s")
    col1, col2, col3 = st.columns(3)
    col1.metric("üí∞ CA total", f"${df_filtr√©['gross sales'].sum():,.2f}")
    col2.metric("üìö Livres vendus", int(df_filtr√©["units sold"].sum()))
    col3.metric("‚≠ê Note moyenne", round(df_filtr√©["book_average_rating"].mean(), 2))

    # --- Aper√ßu donn√©es ---
    with st.expander("üßê Aper√ßu des donn√©es filtr√©es"):
        st.dataframe(df_filtr√©.head(20))

    # --- Top 10 livres les plus vendus ---
    if "book name" in df.columns and "units sold" in df.columns:
        st.subheader("üìñ Top 10 livres les plus vendus")
        top_books = (
            df_filtr√©.groupby("book name")["units sold"]
            .sum()
            .sort_values(ascending=False)
            .head(10)
        )
        st.bar_chart(top_books)

    # --- Ventes par genre ---
    if "genre" in df.columns:
        st.subheader("üéØ Ventes par genre")
        genre_sales = (
            df_filtr√©.groupby("genre")["units sold"]
            .sum()
            .sort_values(ascending=False)
        )
        st.bar_chart(genre_sales)

    # --- Ventes par ann√©e ---
    if "publishing year" in df.columns:
        st.subheader("üìÖ Ventes par ann√©e")
        year_sales = (
            df_filtr√©.groupby("publishing year")["units sold"]
            .sum()
            .sort_index()
        )
        st.line_chart(year_sales)

    # --- Export CSV ---
    st.subheader("üì• Exporter les donn√©es")
    csv = df_filtr√©.to_csv(index=False).encode("utf-8")
    st.download_button(
        label="üìÅ T√©l√©charger les donn√©es filtr√©es (CSV)",
        data=csv,
        file_name="donnees_filtrees_bookshop.csv",
        mime="text/csv",
    )

else:
    st.warning("‚ö†Ô∏è Aucune donn√©e √† afficher.")

# --- Fermeture de connexion ---
if conn:
    conn.close()
